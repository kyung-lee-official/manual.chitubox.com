import Head from "next/head";
import { useRouter } from "next/router";
import React, { createContext, useState } from "react";
import styled from "styled-components";
import { Banner, DocsContent, DocsHeader, Footer } from "..";
import docsContext from "preload/docsContext.json";
import { getFlattenPagesContext } from "helpers/functions";

const StyledMain = styled.main`
	/* font-family: "Nanum Gothic"; */
	/* font-family: "Optimistic Display", "-apple-system", "ui-sans-serif",
		"system-ui", "BlinkMacSystemFont", "Segoe UI", "Roboto",
		"Helvetica Neue", "Arial", "Noto Sans", "sans-serif",
		"Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol",
		"Noto Color Emoji"; */
	font-family: "system-ui";
	background-color: ${(props) => props.theme.background};
`;

export const DocContext = createContext<any>(null);

export const DocsLayout: React.FC<any> = (props) => {
	const {
		defaultTitle,
		defaultKeywords,
		defaultDescription,
		meta,
		children,
	} = props;
	const router = useRouter();
	const urlLocale = router.pathname.split("/")[1];
	const docInstance = router.pathname.split("/")[3];
	/* Either be "latest" or "vx.x.x" */
	const versionCode = router.pathname.split("/")[4];

	function getContexts(urlLocale: string) {
		/* Get the localized context, which contains the context of all doc instances for the designated language. */
		let localizedContext = docsContext.find((locallizedSidebar: any) => {
			return locallizedSidebar.locale === urlLocale;
		});
		/* Get the doc instance context, which contains all version contexts of the designated doc instance. */
		let docInstanceContext = localizedContext!.localizedDocInstances.find(
			(localizedDocInstance: any) => {
				return localizedDocInstance.docInstance === docInstance;
			}
		);
		/* Get the versioned context, which contains all page contexts of the designated doc instance and version. */
		let versionedContext = docInstanceContext!.versionedContexts.find(
			(versionedContext: any) => {
				return versionedContext.versionCode === versionCode;
			}
		);
		/* Get the page context, which contains all TOC contexts of the designated page. */
		let flattenPagesContext = getFlattenPagesContext(
			versionedContext!.pagesContext
		);
		let pageContext = flattenPagesContext.find((pageContext: any) => {
			return pageContext.path === router.pathname;
		});
		return {
			localizedContext,
			docInstanceContext,
			versionedContext,
			flattenPagesContext,
			pageContext,
		};
	}
	const {
		localizedContext,
		docInstanceContext,
		versionedContext,
		flattenPagesContext,
		pageContext,
	} = getContexts(urlLocale);
	const [searchResults, setSearchResults] = useState<any>([]);

	return (
		<DocContext.Provider
			value={{
				localizedContext,
				docInstanceContext,
				versionedContext,
				flattenPagesContext,
				pageContext,
				searchResults,
				setSearchResults,
			}}
		>
			<Head>
				<title>{meta.title ? meta.title : defaultTitle}</title>
				<meta name="" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<StyledMain>
				<DocsHeader />
				<DocsContent>{children}</DocsContent>
				<Footer />
			</StyledMain>
		</DocContext.Provider>
	);
};

DocsLayout.defaultProps = {
	defaultTitle: "Default Title",
	defaultKeywords: "default keywords",
	defaultDescription: "default description",
};
